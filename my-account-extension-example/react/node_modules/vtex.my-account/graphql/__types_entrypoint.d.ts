export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  IOSanitizedString: any;
  IOUpload: any;
  Upload: any;
};

export type AppSettings = {
  __typename?: 'AppSettings';
  cacheId?: Maybe<Scalars['ID']>;
  useMap?: Maybe<Scalars['Boolean']>;
  showGenders?: Maybe<Scalars['Boolean']>;
  showMyCards?: Maybe<Scalars['Boolean']>;
  showMyOrders?: Maybe<Scalars['Boolean']>;
};



export type Query = {
  __typename?: 'Query';
  appSettings?: Maybe<AppSettings>;
};


export {}